{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState } from 'react';\nexport const usePlatformState = () => {\n  _s();\n  const [currentView, setCurrentView] = useState(() => {\n    const saved = localStorage.getItem('currentView');\n    return saved || 'landing';\n  });\n  const [userType, setUserType] = useState('');\n  const [onboardingStep, setOnboardingStep] = useState(0);\n  const [formData, setFormData] = useState({});\n  const [selectedBuyer, setSelectedBuyer] = useState(null);\n  const [matches, setMatches] = useState(() => {\n    try {\n      const saved = localStorage.getItem('matches');\n      return saved ? JSON.parse(saved) : [];\n    } catch {\n      return [];\n    }\n  });\n  const [dealStage, setDealStage] = useState('initial');\n  const [aiAnalysis, setAiAnalysis] = useState(null);\n  const [uploadedDocs, setUploadedDocs] = useState([]);\n  const updateFormData = (field, value) => {\n    setFormData(prev => ({\n      ...prev,\n      [field]: value\n    }));\n  };\n  const startOnboarding = type => {\n    setUserType(type);\n    setCurrentView('onboarding');\n    setOnboardingStep(0);\n  };\n  const simulateAIAnalysis = docType => {\n    setTimeout(() => {\n      setAiAnalysis({\n        type: docType,\n        summary: \"AI has analyzed the financial documents and identified key metrics, risk factors, and growth opportunities.\",\n        keyFindings: [\"Revenue growth of 23% YoY\", \"Strong cash flow with 18% EBITDA margin\", \"Low customer concentration risk\", \"Potential for operational improvements\"],\n        riskFactors: [\"Dependency on single supplier\", \"Market competition increasing\"],\n        confidence: 94\n      });\n    }, 2000);\n  };\n\n  // persistence side-effects\n  React.useEffect(() => {\n    try {\n      localStorage.setItem('matches', JSON.stringify(matches));\n    } catch {}\n  }, [matches]);\n  React.useEffect(() => {\n    try {\n      localStorage.setItem('currentView', currentView);\n    } catch {}\n  }, [currentView]);\n  return {\n    currentView,\n    setCurrentView,\n    userType,\n    setUserType,\n    onboardingStep,\n    setOnboardingStep,\n    formData,\n    setFormData,\n    updateFormData,\n    selectedBuyer,\n    setSelectedBuyer,\n    matches,\n    setMatches,\n    dealStage,\n    setDealStage,\n    aiAnalysis,\n    setAiAnalysis,\n    uploadedDocs,\n    setUploadedDocs,\n    startOnboarding,\n    simulateAIAnalysis\n  };\n};\n_s(usePlatformState, \"Q17s7ri0ULwRH6iRhNfSoizxqAk=\");","map":{"version":3,"names":["useState","usePlatformState","_s","currentView","setCurrentView","saved","localStorage","getItem","userType","setUserType","onboardingStep","setOnboardingStep","formData","setFormData","selectedBuyer","setSelectedBuyer","matches","setMatches","JSON","parse","dealStage","setDealStage","aiAnalysis","setAiAnalysis","uploadedDocs","setUploadedDocs","updateFormData","field","value","prev","startOnboarding","type","simulateAIAnalysis","docType","setTimeout","summary","keyFindings","riskFactors","confidence","React","useEffect","setItem","stringify"],"sources":["D:/Brave Download/files/src/hooks/usePlatformState.ts"],"sourcesContent":["import { useState } from 'react';\nimport { ViewType, UserType, BuyerProfile, AIAnalysis } from '../types';\n\nexport const usePlatformState = () => {\n  const [currentView, setCurrentView] = useState<ViewType>(() => {\n    const saved = localStorage.getItem('currentView');\n    return (saved as ViewType) || 'landing';\n  });\n  const [userType, setUserType] = useState<UserType>('');\n  const [onboardingStep, setOnboardingStep] = useState(0);\n  const [formData, setFormData] = useState<Record<string, any>>({});\n  const [selectedBuyer, setSelectedBuyer] = useState<BuyerProfile | null>(null);\n  const [matches, setMatches] = useState<number[]>(() => {\n    try {\n      const saved = localStorage.getItem('matches');\n      return saved ? JSON.parse(saved) : [];\n    } catch {\n      return [];\n    }\n  });\n  const [dealStage, setDealStage] = useState('initial');\n  const [aiAnalysis, setAiAnalysis] = useState<AIAnalysis | null>(null);\n  const [uploadedDocs, setUploadedDocs] = useState<string[]>([]);\n\n  const updateFormData = (field: string, value: any) => {\n    setFormData(prev => ({ ...prev, [field]: value }));\n  };\n\n  const startOnboarding = (type: UserType) => {\n    setUserType(type);\n    setCurrentView('onboarding');\n    setOnboardingStep(0);\n  };\n\n  const simulateAIAnalysis = (docType: string) => {\n    setTimeout(() => {\n      setAiAnalysis({\n        type: docType,\n        summary: \"AI has analyzed the financial documents and identified key metrics, risk factors, and growth opportunities.\",\n        keyFindings: [\n          \"Revenue growth of 23% YoY\",\n          \"Strong cash flow with 18% EBITDA margin\",\n          \"Low customer concentration risk\",\n          \"Potential for operational improvements\"\n        ],\n        riskFactors: [\n          \"Dependency on single supplier\",\n          \"Market competition increasing\"\n        ],\n        confidence: 94\n      });\n    }, 2000);\n  };\n\n  // persistence side-effects\n  React.useEffect(() => {\n    try { localStorage.setItem('matches', JSON.stringify(matches)); } catch {}\n  }, [matches]);\n\n  React.useEffect(() => {\n    try { localStorage.setItem('currentView', currentView); } catch {}\n  }, [currentView]);\n\n  return {\n    currentView,\n    setCurrentView,\n    userType,\n    setUserType,\n    onboardingStep,\n    setOnboardingStep,\n    formData,\n    setFormData,\n    updateFormData,\n    selectedBuyer,\n    setSelectedBuyer,\n    matches,\n    setMatches,\n    dealStage,\n    setDealStage,\n    aiAnalysis,\n    setAiAnalysis,\n    uploadedDocs,\n    setUploadedDocs,\n    startOnboarding,\n    simulateAIAnalysis\n  };\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}